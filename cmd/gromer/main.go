package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"unicode"

	"github.com/gobuffalo/velvet"
	"github.com/pyros2097/gromer"
	"golang.org/x/mod/modfile"
)

type Route struct {
	Method string
	Path   string
	Pkg    string
}

func getMethod(src string) string {
	if strings.HasSuffix(src, "get.go") {
		return "GET"
	} else if strings.HasSuffix(src, "post.go") {
		return "POST"
	} else if strings.HasSuffix(src, "put.go") {
		return "PUT"
	} else if strings.HasSuffix(src, "patch.go") {
		return "PATCH"
	} else if strings.HasSuffix(src, "delete.go") {
		return "DELETE"
	} else if strings.HasSuffix(src, "head.go") {
		return "HEAD"
	} else if strings.HasSuffix(src, "options.go") {
		return "OPTIONS"
	} else if strings.HasSuffix(src, "connect.go") {
		return "CONNECT"
	} else if strings.HasSuffix(src, "trace.go") {
		return "TRACE"
	} else {
		panic(fmt.Sprintf("Uknown route found %s", src))
	}
}

func getRoute(method, src string) string {
	return strings.ReplaceAll(src, "/"+strings.ToLower(method)+".go", "")
}

func getPackage(src string) string {
	return src
}

func rewritePath(route string) string {
	muxRoute := bytes.NewBuffer(nil)
	foundStart := false
	for _, v := range route {
		if string(v) == "_" && !foundStart {
			foundStart = true
			muxRoute.WriteString("{")
		} else if string(v) == "_" && foundStart {
			foundStart = false
			muxRoute.WriteString("}")
		} else {
			muxRoute.WriteString(string(v))
		}
	}
	return muxRoute.String()
}

func rewritePkg(pkg string) string {
	arr := strings.Split(pkg, "/")
	lastItem := arr[len(arr)-1]
	if strings.Contains(lastItem, "_") {
		return arr[len(arr)-2] + lastItem
	}
	return lastItem
}

func lowerFirst(s string) string {
	for i, v := range s {
		return string(unicode.ToLower(v)) + s[i+1:]
	}
	return ""
}

func main() {
	moduleName := ""
	pkgFlag := flag.String("pkg", "", "specify a package name")
	flag.Parse()
	if pkgFlag == nil || *pkgFlag == "" {
		data, err := ioutil.ReadFile("go.mod")
		if err != nil {
			log.Fatalf("go.mod file not found %s", err.Error())
		}
		modTree, err := modfile.Parse("go.mod", data, nil)
		if err != nil {
			log.Fatalf("could not parse go.mod %s", err.Error())
		}
		moduleName = modTree.Module.Mod.Path
	} else {
		moduleName = *pkgFlag
	}
	allPkgs := map[string]string{}
	err := filepath.Walk("pages",
		func(filesrc string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}
			if !info.IsDir() {
				route := strings.ReplaceAll(filesrc, "pages", "")
				method := getMethod(route)
				path := getRoute(method, route)
				pkg := getPackage(path)
				allPkgs[pkg] = ""
				if path == "" { // for index page
					path = "/"
					pkg = "pages"
				}
				gromer.RouteDefs = append(gromer.RouteDefs, gromer.RouteDefinition{
					Method: method,
					Path:   rewritePath(path),
					Pkg:    rewritePkg(pkg),
				})
			}
			return nil
		})
	if err != nil {
		log.Fatal(err)
	}
	for _, r := range gromer.RouteDefs {
		fmt.Printf("%-6s %s\n", r.Method, r.Path)
	}
	err = velvet.Helpers.Add("title", func(v string) string {
		return strings.Title(strings.ToLower(v))
	})
	if err != nil {
		log.Fatal(err)
	}
	ctx := velvet.NewContext()
	ctx.Set("moduleName", moduleName)
	ctx.Set("allPkgs", allPkgs)
	ctx.Set("routes", gromer.RouteDefs)
	ctx.Set("tick", "`")
	s, err := velvet.Render(`// Code generated by gromer. DO NOT EDIT.
package main

import (
	"os"

	"github.com/gorilla/mux"
	"github.com/pyros2097/gromer"
	"github.com/rs/zerolog/log"
	"gocloud.dev/server"

	"{{ moduleName }}/assets"
	{{#each allPkgs }}"{{ moduleName }}/pages{{ @key }}"
	{{/each}}
)

func main() {
	port := os.Getenv("PORT")
	r := mux.NewRouter()
	r.Use(gromer.CorsMiddleware)
	r.Use(gromer.LogMiddleware)
	r.NotFoundHandler = gromer.NotFoundHandler
	gromer.Static(r, "/assets/", assets.FS)
	gromer.Handle(r, "GET", "/api", gromer.ApiExplorer, nil)
	{{#each routes as |route| }}gromer.Handle(r, "{{ route.Method }}", "{{ route.Path }}", {{ route.Pkg }}.{{ route.Method }}, {{ route.Pkg }}.{{ title route.Method }}Params{})
	{{/each}}
	println("http server listening on http://localhost:"+port)
	srv := server.New(r, nil)
	if err := srv.ListenAndServe(":"+port); err != nil {
		log.Fatal().Stack().Err(err).Msg("failed to listen")
	}
}
`, ctx)
	if err != nil {
		panic(err)
	}
	err = ioutil.WriteFile("main.go", []byte(s), 0644)
	if err != nil {
		panic(err)
	}
}

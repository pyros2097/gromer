// Code generated by gromer. DO NOT EDIT.
package main

import (
	"os"

	"github.com/gorilla/mux"
	"github.com/pyros2097/gromer"
	"github.com/rs/zerolog/log"
	"gocloud.dev/server"

	"github.com/pyros2097/gromer/_example/assets"
	"github.com/pyros2097/gromer/_example/components"
	"github.com/pyros2097/gromer/_example/pages/404"
	"github.com/pyros2097/gromer/_example/pages"
	"github.com/pyros2097/gromer/_example/pages/about"
	"github.com/pyros2097/gromer/_example/pages/api/recover"
	"github.com/pyros2097/gromer/_example/pages/api/todos"
	"github.com/pyros2097/gromer/_example/pages/api/todos/_todoId_"
	
)

func init() {
	gromer.RegisterComponent(components.Header)
	gromer.RegisterComponent(components.Page)
	gromer.RegisterComponent(components.Todo)
	
}

func main() {
	port := os.Getenv("PORT")
	r := mux.NewRouter()
	r.Use(gromer.CorsMiddleware)
	r.Use(gromer.LogMiddleware)
	
	r.NotFoundHandler = gromer.StatusHandler(not_found_404.GET)
	
	gromer.Static(r, "/assets/", assets.FS)
	gromer.Handle(r, "GET", "/api", gromer.ApiExplorer)
	gromer.Handle(r, "GET", "/", pages.GET)
	gromer.Handle(r, "GET", "/about", about.GET)
	gromer.Handle(r, "GET", "/api/recover", recover.GET)
	gromer.Handle(r, "GET", "/api/todos", todos.GET)
	gromer.Handle(r, "POST", "/api/todos", todos.POST)
	gromer.Handle(r, "DELETE", "/api/todos/{todoId}", todos_todoId_.DELETE)
	gromer.Handle(r, "GET", "/api/todos/{todoId}", todos_todoId_.GET)
	gromer.Handle(r, "PUT", "/api/todos/{todoId}", todos_todoId_.PUT)
	
	log.Info().Msg("http server listening on http://localhost:"+port)
	srv := server.New(r, nil)
	if err := srv.ListenAndServe(":"+port); err != nil {
		log.Fatal().Stack().Err(err).Msg("failed to listen")
	}
}

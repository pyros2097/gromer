// Code generated by sqlc. DO NOT EDIT.

package services

import (
	"context"
	"errors"
	"time"
)

type Todo struct {
	ID        string    `json:"id"`
	Text      string    `json:"text"`
	Completed bool      `json:"completed"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

var todos = []*Todo{}

func CreateTodo(ctx context.Context, todo Todo) (*Todo, error) {
	todos = append(todos, &todo)
	return &todo, nil
}

type UpdateTodoParams struct {
	Text      string    `json:"text"`
	Completed bool      `json:"completed"`
}

func UpdateTodo(ctx context.Context, id string, params UpdateTodoParams) (*Todo, error) {
	updateIndex := -1
	for i, todo := range todos {
		if todo.ID == id {
			updateIndex = i
		}
	}
	if updateIndex != -1 {
		todos[updateIndex].Text = params.Text
		todos[updateIndex].Completed = params.Completed
		todos[updateIndex].UpdatedAt = time.Now()
		return todos[updateIndex], nil
	}
	return nil, errors.New("Todo not found")
}

func DeleteTodo(ctx context.Context, id string) (string, error) {
	deleteIndex := -1
	for i, todo := range todos {
		if todo.ID == id {
			deleteIndex = i
		}
	}
	if deleteIndex != -1 {
		todos = append(todos[:deleteIndex], todos[deleteIndex+1:]...)
		return id, nil
	}
	return "", errors.New("Todo not found")
}

func GetTodo(ctx context.Context, id string) (*Todo, error) {
	for _, todo := range todos {
		if todo.ID == id {
			return todo, nil
		}
	}
	return nil, errors.New("Todo not found")
}


type GetAllTodoParams struct {
	Limit int `json:"limit"`
}

func GetAllTodo(ctx context.Context, params GetAllTodoParams) []*Todo {
	return todos
}
// Code generated by sqlc. DO NOT EDIT.
// source: todo.sql

package db

import (
	"context"
	"time"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
  id, text, completed, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, text, completed, created_at, updated_at
`

type CreateTodoParams struct {
	ID        string    `json:"id"`
	Text      string    `json:"text"`
	Completed bool      `json:"completed"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.ID,
		arg.Text,
		arg.Completed,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, text, completed, created_at, updated_at FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id string) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, text, completed, created_at, updated_at FROM todos
ORDER BY id LIMIT $1 OFFSET $2
`

type ListTodosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]*Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos 
SET
  completed = $2,
  updated_at = $3
WHERE id = $1
RETURNING id, text, completed, created_at, updated_at
`

type UpdateTodoParams struct {
	ID        string    `json:"id"`
	Completed bool      `json:"completed"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.ID, arg.Completed, arg.UpdatedAt)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
